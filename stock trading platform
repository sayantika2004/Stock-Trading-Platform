import java.util.*;

// Represents a stock
class Stock {
    private String symbol;
    private String name;
    private double price;
    private int quantity;

    public Stock(String symbol, String name, double price) {
        this.symbol = symbol;
        this.name = name;
        this.price = price;
        this.quantity = 0; // Initially, the user has 0 stocks of this type
    }

    public String getSymbol() {
        return symbol;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void increaseQuantity(int amount) {
        this.quantity += amount;
    }

    public void decreaseQuantity(int amount) {
        this.quantity -= amount;
    }

    @Override
    public String toString() {
        return name + " (" + symbol + ") - Price: $" + price + " Quantity: " + quantity;
    }
}

// Represents a portfolio that holds multiple stocks
class Portfolio {
    private Map<String, Stock> stocks; // Symbol to Stock mapping

    public Portfolio() {
        this.stocks = new HashMap<>();
    }

    public void addStock(Stock stock) {
        stocks.put(stock.getSymbol(), stock);
    }

    public Stock getStock(String symbol) {
        return stocks.get(symbol);
    }

    public Collection<Stock> getAllStocks() {
        return stocks.values();
    }

    public void buyStock(String symbol, int quantity, double price) {
        Stock stock = stocks.get(symbol);
        if (stock != null) {
            stock.increaseQuantity(quantity);
            stock.setPrice(price); // Update price to the latest buy price
        } else {
            System.out.println("Stock symbol " + symbol + " not found in portfolio.");
        }
    }

    public void sellStock(String symbol, int quantity, double price) {
        Stock stock = stocks.get(symbol);
        if (stock != null) {
            if (stock.getQuantity() >= quantity) {
                stock.decreaseQuantity(quantity);
                stock.setPrice(price); // Update price to the latest sell price
            } else {
                System.out.println("Not enough stocks of " + stock.getName() + " to sell.");
            }
        } else {
            System.out.println("Stock symbol " + symbol + " not found in portfolio.");
        }
    }

    public double calculatePortfolioValue() {
        double totalValue = 0.0;
        for (Stock stock : stocks.values()) {
            totalValue += stock.getPrice() * stock.getQuantity();
        }
        return totalValue;
    }

    public void printPortfolio() {
        System.out.println("\nPortfolio:");
        for (Stock stock : stocks.values()) {
            System.out.println(stock);
        }
        System.out.println("Total Portfolio Value: $" + calculatePortfolioValue());
    }
}

// Simulated stock market that generates random prices
class StockMarket {
    private Map<String, Double> stockPrices; // Symbol to price mapping

    public StockMarket() {
        this.stockPrices = new HashMap<>();
        // Initialize with some sample stocks and initial prices
        stockPrices.put("AAPL", 150.0);
        stockPrices.put("GOOGL", 2800.0);
        stockPrices.put("AMZN", 3500.0);
    }

    public double getPrice(String symbol) {
        return stockPrices.getOrDefault(symbol, 0.0);
    }

    public void updatePrices() {
        // Simulate price fluctuations (randomly change prices within a small range)
        Random rand = new Random();
        for (String symbol : stockPrices.keySet()) {
            double currentPrice = stockPrices.get(symbol);
            double newPrice = currentPrice * (1 + (rand.nextDouble() - 0.5) * 0.1); // +/- 5% change
            stockPrices.put(symbol, newPrice);
        }
    }
}

// Main program to simulate the stock trading platform
public class StockTradingPlatform {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Portfolio portfolio = new Portfolio();
        StockMarket market = new StockMarket();

        // Add initial stocks to the portfolio
        portfolio.addStock(new Stock("AAPL", "Apple Inc.", market.getPrice("AAPL")));
        portfolio.addStock(new Stock("GOOGL", "Alphabet Inc.", market.getPrice("GOOGL")));
        portfolio.addStock(new Stock("AMZN", "Amazon.com Inc.", market.getPrice("AMZN")));

        boolean running = true;
        while (running) {
            System.out.println("\n===== Stock Trading Platform =====");
            System.out.println("1. View Portfolio");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. Update Stock Prices");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    portfolio.printPortfolio();
                    break;
                case 2:
                    System.out.print("Enter stock symbol to buy: ");
                    String buySymbol = scanner.next();
                    System.out.print("Enter quantity to buy: ");
                    int buyQuantity = scanner.nextInt();
                    double buyPrice = market.getPrice(buySymbol);
                    portfolio.buyStock(buySymbol, buyQuantity, buyPrice);
                    break;
                case 3:
                    System.out.print("Enter stock symbol to sell: ");
                    String sellSymbol = scanner.next();
                    System.out.print("Enter quantity to sell: ");
                    int sellQuantity = scanner.nextInt();
                    double sellPrice = market.getPrice(sellSymbol);
                    portfolio.sellStock(sellSymbol, sellQuantity, sellPrice);
                    break;
                case 4:
                    market.updatePrices();
                    System.out.println("Stock prices updated.");
                    break;
                case 5:
                    running = false;
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a number from 1 to 5.");
            }
        }

        System.out.println("Exiting Stock Trading Platform. Goodbye!");
        scanner.close();
    }
}
